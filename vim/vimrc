"""""""""""""""""""""""""""""""""""
" The vimrc file of Evan Morikawa "
"""""""""""""""""""""""""""""""""""

"""""""""""""""""""
" Vundle Packages "
"""""""""""""""""""
set nocompatible " Does not use old vi quirks
filetype off     " Required temporarily for vundle
set rtp+=~/.vim/bundle/vundle
call vundle#rc()

" Must start with Vundle. Vundle handles package management
Bundle 'gmarik/vundle'

" A Git wrapper so awesome, it should be illegal
Bundle 'tpope/vim-fugitive'

" Helps me see "
""""""""""""""""
" A color-cordinated, more helpful statusline
Bundle 'Lokaltog/vim-powerline'

" Colors CSS tags with the appropriate color.
Bundle 'skammer/vim-css-color'

" Add CSS3 syntax support to vim's built-in `syntax/css.vim`
Bundle 'hail2u/vim-css3-syntax'

" HAML, SASS, SCSS support for Vim
Bundle 'tpope/vim-haml'

" Less syntax support
Bundle 'groenewege/vim-less'

" CoffeeScript support for vim
Bundle 'kchmck/vim-coffee-script'

" Markdown syntax for vim
Bundle 'plasticboy/vim-markdown'

" Helps me search "
"""""""""""""""""""
Bundle 'grep.vim'

" Helps me move "
"""""""""""""""""
" A tree explorer plugin for vim
" <c-n>
Bundle 'scrooloose/nerdtree'

" Ruby on Rails power tools
Bundle 'tpope/vim-rails'

" Extends % operator to match html tags and others.
Bundle 'tsaleh/vim-matchit'

" Fuzzy file, buffer, mru and tag finder
Bundle 'kien/ctrlp.vim'

" Helps me type "
"""""""""""""""""
" Quoting/parenthesizing made simple
" cs<match><replace>
" ds<match>
" v<selection>S<replacement>
Bundle 'tpope/vim-surround'

" Enable repeating supported plugin maps with '.'
Bundle 'tpope/vim-repeat'

" Write snippets in vim
" <tab> after a snippet key
Bundle 'msanders/snipmate.vim'

" A parser for a condensed HTML format
" <c-e> after a block of sparkup-formatted pre-html
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}

" Easily comment in and out lines
" <leader>__
Bundle 'tomtom/tcomment_vim'

" Vim motions on speed. Replaces the <number> in <number><motion>
" <leader><leader><motion>
Bundle 'Lokaltog/vim-easymotion'

" Settings "
""""""""""""
filetype plugin indent on " Turn on filetype after Vundle is setup
colorscheme evan
syntax enable

set nu "Turn on line numbers
set lbr "Wordwrapping doesn't break words in the middle
set wrap "wrap lines
set list "All characters print. Including meta characters
set ts=2
set sw=2
set ruler "Shows the ruler
set magic "set magic on, for regular expressions
set mat=2 "two-tenths of a second blink
set smarttab
set wildmenu "Enhanced tab completion
set autoread "Set to auto read when a file is changed from the outside
set vb t_vb= "disables visual bell
set hlsearch
set showmode " Says whether or not paste mode is turned on or off
set t_Co=256 "Enable colored terminal
let &t_Co=256
set incsearch "Incremental search
set smartcase "Will switch to case sensitive if a cap is used
set showmatch "Shows matches on search
set expandtab "Replaces tabs with spaces
set tabstop=2 "Num characters when tab is pushed
set ignorecase "case insensitive search but see next option
set autoindent "Enable automatic alignment during insertions
set noswapfile "Don't use swp files
set smartindent "Tries to recognize code and indent
set cmdheight=2 "The commandbar height
set shiftwidth=2
set textwidth=74 " Maximum line length at 74 characters. Trigged with gq
set noerrorbells
set novisualbell
set history=1000
set laststatus=2 "Always show the status line
set restorescreen
set encoding=utf8
set guioptions-=T "Removes GUI bars
set guioptions-=l "Removes scrollbars
set guioptions-=r "Removes scrollbars
set guioptions-=b "Removes scrollbars
set colorcolumn=75 "Have a line of at 75 characters wide. The max width is 74 characters
set pastetoggle=<F2> " Binds F2 to pastetoggling
set wildmode=list:longest,full " bash command line tab completion
set listchars=tab:\|\ ,trail:●,extends:>,precedes:<,nbsp:+ "Whitespace showing
" set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{CurDir()}%h\ \ \ Line:\ %l/%L:%c

" Key remappings "
""""""""""""""""""
let mapleader = ","

"shell shortcuts in command mode
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-K> <C-U>
cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

"Space bar searching
map <space> /

nnoremap <silent> <C-g> :Grep -ri

" Toggles paste mode and shows value of the option
nnoremap <F2> :set invpaste paste?<CR>

"Smart folding on shift-space
nnoremap <silent> <S-Space> @=(foldlevel('.')?'za':'l')<CR>
vnoremap <S-Space> zf

"Move between buffers
map <c-h> <c-w>h
map <c-l> <c-w>l

noremap <C-S> :%s/
noremap <C-Q> <esc>:bd<CR>:vsp<CR>:bn<CR>:buffers<CR>

"noremap <c-e> :! python %<CR>
"noremap <F5> :! ruby %<CR>

"Easier movement around the page
noremap <C-j> 3<C-e>
noremap <C-k> 3<C-y>
noremap <S-j> 3j
noremap <S-k> 3k
noremap <S-l> 5l
noremap <S-h> 5h
noremap <PageUp> <c-u>
noremap <PageDown> <c-d>
noremap <Home> 0
noremap <End> $
noremap j gj
noremap k gk
map 0 ^

"Quick escape and saving via button-mashing
inoremap jk <Esc>
inoremap kj <Esc>
cnoremap jk <Esc>
cnoremap kj <Esc>
inoremap df <Esc>:w<CR>
inoremap fd <Esc>:w<CR>
noremap df :w<CR>
noremap fd :w<CR>

"In visual mode when you press * or # to search for the current selection
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>

"Displays the tag type under the cursor. Really useful for generating colors
map <c-x> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans <'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Custom commands "
"""""""""""""""""""
" Removes all trailing whitespace
command! Whitespace %s/\s\+$//e

" Autocommands "
"""""""""""""""
autocmd! bufwritepost vimrc source ~/.vimrc "When vimrc is edited, reload it
autocmd BufWrite *.py :call DeleteTrailingWS() "Deletes trailing whitepace

" Mixes in html filetype to web languages
au BufRead,BufNewFile *.php set ft=php.html
au BufRead,BufNewFile *.erb set ft=eruby.html
au BufRead,BufNewFile *.coffee set ft=coffee.html

" Utility Methods "
""""""""""""""""""
match LineTooLong /\%>74v.\+/

function! CurDir()
  let curdir = substitute(getcwd(), '/Users/amir/', "~/", "g")
  return curdir
endfunction

function! HasPaste()
  if &paste
    return 'PASTE MODE  '
  else
    return ''
  endif
endfunction

function! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

function! CmdLine(str)
  exe "menu Foo.Bar :" . a:str
  emenu Foo.Bar
  unmenu Foo
endfunction

function! VisualSearch(direction) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", '\\/.*$^~[]')
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'b'
    execute "normal ?" . l:pattern . "^M"
  elseif a:direction == 'gv'
    call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
  elseif a:direction == 'f'
    execute "normal /" . l:pattern . "^M"
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction

""""""""""""""""""""""""""""""
" Language Specific Settings "
""""""""""""""""""""""""""""""

" Python "
""""""""""
au FileType python setl
    \ tabstop=4
    \ softtabstop=4
    \ shiftwidth=4
    \ textwidth=80
    \ smarttab
    \ expandtab

let python_highlight_all = 1
au FileType python syn keyword pythonDecorator True None False self

au BufNewFile,BufRead *.jinja set syntax=htmljinja
au BufNewFile,BufRead *.mako set ft=mako
au BufNewFile,BufRead *.less set ft=less

au FileType python inoremap <buffer> $r return
au FileType python inoremap <buffer> $i import
au FileType python inoremap <buffer> $p print
au FileType python inoremap <buffer> $f #--- PH ----------------------------------------------<esc>FP2xi
au FileType python map <buffer> <leader>1 /class
au FileType python map <buffer> <leader>2 /def
au FileType python map <buffer> <leader>C ?class
au FileType python map <buffer> <leader>D ?def

let &t_Sf="\<Esc>[3%dm"
let &t_Sb="\<Esc>[4%dm"
let &t_te="\<Esc>[?47l"
let &t_ti="\<Esc>[?47h"


"""""""""""
" PLUGINS "
"""""""""""
" Nerd Tree "
"""""""""""""
noremap <c-n> :NERDTreeToggle<CR>

" Sparkup "
"""""""""""
let sparkupNextMapping = '<M-e>'
